hra.tree.confmat=table("Predicted"=hra.tree.pred.step, "Actual"=hra.step.test$Attrition) # Confusion matrix
hra.tree.confmat
TruN=hra.tree.confmat[1,1] # True negatives
TruP=hra.tree.confmat[2,2] # True positives
FalN=hra.tree.confmat[1,2] # False negatives
FalP=hra.tree.confmat[2,1] # False positives
TotN=hra.tree.confmat[1,1] + hra.tree.confmat[2,1] # Total negatives
TotP=hra.tree.confmat[1,2] + hra.tree.confmat[2,2] # Total positives
Tot=TotN+TotP # Total
Accuracy.Rate=(TruN+TruP)/Tot
Error.Rate=(FalN+FalP)/Tot
Sensitivity=TruP/TotP # Proportion of correct positives
Specificity=TruN/TotN
FalP.Rate = 1 - Specificity
tree.rates.50=c(Accuracy.Rate, Error.Rate, Sensitivity, Specificity, FalP.Rate)
names(tree.rates.50)=c("Accuracy Rate", "Error Rate", "Sensitivity", "Specificity", "False Positives")
hra.tree.pred.class.275 = ifelse(hra.step.pred.prob[,2]>0.275, 1, 0)
hra.tree.confmat.275 <- table(hra.tree.pred.class.275, hra.step.test$Attrition)
hra.tree.confmat.275
TruN=hra.tree.confmat.275[1,1] # True negatives
TruP=hra.tree.confmat.275[2,2] # True positives
FalN=hra.tree.confmat.275[1,2] # False negatives
FalP=hra.tree.confmat.275[2,1] # False positives
TotN=hra.tree.confmat.275[1,1] + hra.tree.confmat.275[2,1] # Total negatives
TotP=hra.tree.confmat.275[1,2] + hra.tree.confmat.275[2,2] # Total positives
Tot=TotN+TotP # Total
Accuracy.Rate=(TruN+TruP)/Tot
Error.Rate=(FalN+FalP)/Tot
Sensitivity=TruP/TotP # Proportion of correct positives
Specificity=TruN/TotN # Proportion of correct negatives
FalP.Rate = 1 - Specificity
tree.rates.275=c(Accuracy.Rate, Error.Rate, Sensitivity, Specificity, FalP.Rate)
names(tree.rates.275)=c("Accuracy Rate", "Error Rate", "Sensitivity", "Specificity", "False Positives")
tree.rates.275
rbind(tree.rates.50, tree.rates.275, logit.fit.stats.compare.new1.final)
pred <- prediction(hra.step.pred.prob[,2], hra.step.test$Attrition)
perf=performance(pred,"tpr","fpr")
plot(perf, colorize=TRUE)
auc=performance(pred,"auc") # Compute the AUC
c(auc@y.name[[1]], auc@y.values[[1]]) # Display the AUC
attach(hrastepreduced)
hra.logit.train <- glm(Attrition ~ ., family=binomial(link="logit"), data=hrastepreduced)
set.seed(1)
test <- sample(1:nrow(hrastepreduced), 0.2*nrow(hrastepreduced))
hra.logit.test=predict(hra.logit.train, hrastepreduced, type="response")[test]
hra.pred.test = ifelse(hra.logit.test>0.5, 1,0)
conf.mat <- table("Predicted"=hra.pred.test, "Actual"=Attrition[test])
colnames(conf.mat) <- c("No", "Yes")
rownames(conf.mat) <- c("No", "Yes")
conf.mat
hra.logit.test
hra.pred.test = ifelse(hra.logit.test>0.275, 1,0)
sum(hra.pred.test)
hrastepreduced
finalProportion <- Sum/294
Sum <- sum(hra.pred.test)
finalProportion <- Sum/294
finalProportion
hra.pred.test = ifelse(hra.logit.test>0.5, 1,0)
Sum <- sum(hra.pred.test)
hrastepreduced
finalProportion <- Sum/294
finalProportion
print("Final porion of employees leaving: " finalProportion)
print("Final porion of employees leaving: ", finalProportion)
finalProportion <- Sum/294
finalProportion
print("Final porion of employees leaving: ")
finalProportion
attach(hrastepreduced)
hra.logit.train <- glm(Attrition ~ ., family=binomial(link="logit"), data=hrastepreduced)
set.seed(1)
test <- sample(1:nrow(hrastepreduced), 0.2*nrow(hrastepreduced))
hra.logit.test=predict(hra.logit.train, hrastepreduced, type="response")[test]
hra.logit.test
attach(hrastepreduced)
hra.logit.train <- glm(Attrition ~ ., family=binomial(link="logit"), data=hrastepreduced)
set.seed(1)
test <- sample(1:nrow(hrastepreduced), 0.2*nrow(hrastepreduced))
hra.logit.test=predict(hra.logit.train, hrastepreduced, type="response")[test]
hra.pred.test = ifelse(hra.logit.test>0.275, 1,0)
Sum <- sum(hra.pred.test)
finalProportion <- Sum/294
finalProportion
print("Final porion of employees leaving: ")
finalProportion
finalProportion <- (Sum/294) * 100
print("Final porion of employees leaving: ")
finalProportion
attach(hrastepreduced)
hra.logit.train <- glm(Attrition ~ ., family=binomial(link="logit"), data=hrastepreduced)
set.seed(1)
test <- sample(1:nrow(hrastepreduced), 0.2*nrow(hrastepreduced))
hra.logit.test=predict(hra.logit.train, hrastepreduced, type="response")[test]
hra.pred.test = ifelse(hra.logit.test>0.275, 1,0)
Sum <- sum(hra.pred.test)
finalProportion <- (Sum/294) * 100
print("Final porion of employees leaving: ")
finalProportion
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
HRA <- read.csv(file = "..\\HR-Employee-Attrition.csv", header = TRUE, sep = ",")
HRA <- read.csv(file = "..\\Data\\HR-Employee-Attrition.csv", header = TRUE, sep = ",")
knitr::opts_chunk$set(echo = TRUE)
HRA <- read.csv(file = "..\\Data\\HR-Employee-Attrition.csv", header = TRUE, sep = ",")
knitr::opts_chunk$set(echo = TRUE)
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(ROCR))
suppressPackageStartupMessages(library(Hmisc))
suppressPackageStartupMessages(library(corrplot))
suppressPackageStartupMessages(library(lmtest))
suppressPackageStartupMessages(library(perturb))
suppressPackageStartupMessages(library(car))
suppressPackageStartupMessages(library(randomForest))
suppressPackageStartupMessages(library(tree))
HRA <- read.csv(file = "..\\Data\\HR-Employee-Attrition.csv", header = TRUE, sep = ",")
head(HRA)
str(HRA)
names(HRA)
#Renaming Age column to "Age"
colnames(HRA)[1] <- "Age"
HRA %>%
ggplot(HRA, mapping = aes(x = Age, fill = Attrition)) +
geom_histogram() +
theme_bw() +
xlab("AGE") +
ylab("Number of Employees")
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(ROCR))
suppressPackageStartupMessages(library(Hmisc))
suppressPackageStartupMessages(library(corrplot))
suppressPackageStartupMessages(library(lmtest))
suppressPackageStartupMessages(library(perturb))
suppressPackageStartupMessages(library(car))
suppressPackageStartupMessages(library(randomForest))
suppressPackageStartupMessages(library(tree))
HRA <- read.csv(file = "..\\Data\\HR-Employee-Attrition.csv", header = TRUE, sep = ",")
head(HRA)
str(HRA)
names(HRA)
#Renaming Age column to "Age"
colnames(HRA)[1] <- "Age"
HRA %>%
ggplot(HRA, mapping = aes(x = Age, fill = Attrition)) +
geom_histogram() +
theme_bw() +
xlab("AGE") +
ylab("Number of Employees")
knitr::opts_chunk$set(echo = TRUE)
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(ROCR))
suppressPackageStartupMessages(library(Hmisc))
suppressPackageStartupMessages(library(corrplot))
suppressPackageStartupMessages(library(lmtest))
suppressPackageStartupMessages(library(perturb))
suppressPackageStartupMessages(library(car))
suppressPackageStartupMessages(library(randomForest))
suppressPackageStartupMessages(library(tree))
HRA <- read.csv(file = "..\\Data\\HR-Employee-Attrition.csv", header = TRUE, sep = ",")
head(HRA)
str(HRA)
names(HRA)
#Renaming Age column to "Age"
colnames(HRA)[1] <- "Age"
HRA %>%
ggplot(HRA, mapping = aes(x = Age, fill = Attrition)) +
geom_histogram() +
theme_bw() +
xlab("AGE") +
ylab("Number of Employees")
HRA %>%
select(Attrition, Age, BusinessTravel, Department, DistanceFromHome, Education, EnvironmentSatisfaction, Gender,
HourlyRate, JobLevel, JobSatisfaction, MaritalStatus, MonthlyIncome, OverTime, PerformanceRating,
RelationshipSatisfaction, TotalWorkingYears, WorkLifeBalance, YearsSinceLastPromotion,
YearsWithCurrManager) ->
hraReducedBusiness
head(hraReducedBusiness)
#Some descriptive analysiis
summary(hraReducedBusiness)
#we can see that there is a lot of No's in Attrition meaning the proportion of staff attrition for our dataset is way higher.
#Finding the proportion of attrition employees
hraReducedBusiness %>%
group_by(Attrition) %>%
summarise (n = n()) %>%
mutate(freq = n / sum(n))
hra.logit <- glm(hraReducedBusiness$Attrition ~ ., data=hraReducedBusiness, family=binomial(link="logit"))
summary(hra.logit)
#Coefficient Plot:
require(coefplot)
coefplot(hra.logit)
#We can see that a lot of the coefficient's confidence intervals are away from zero and a lot are quite close to zero and significant.
# Fit statistics
-2*logLik(hra.logit) # 2LL
deviance(hra.logit) # Should yield the same value
AIC(hra.logit) # 2LL + 2*Number of variables
log.odds <- coef(hra.logit)
odds <- exp(coef(hra.logit))
prob <- odds/(1+odds)
cbind(log.odds, odds, prob)
#95 percent confidence intervals of log odds.
confint(hra.logit)
#95 percent confidence intervals of odds.
exp(confint(hra.logit))
setwd("C:/Study/Predictive/Project/code")
HRA <- read.csv(file = "..\\Data\\HR-Employee-Attrition.csv", header = TRUE, sep = ",")
setwd("C:/Study/Stat612R/R Project/Code")
knitr::opts_chunk$set(echo = TRUE, warning = F, message = F)
unemploy <- read_csv("..//Data//unemployment.csv")
accidents1 <- read_csv("Data//accidents_2017.csv")
unemploy <- read_csv("..//Data//unemployment.csv")
knitr::opts_chunk$set(echo = F, warning = F, message = F)
str(unemploy)
head(unemploy)
unemploy
accidents%>%
group_by(DISTRICT.NAME)%>%
summarise(total_vic = sum(VICTIMS, na.rm = T))%>%
mutate(vic_rate = round(100 * total_vic/ sum(total_vic),2))%>%
arrange(desc(total_vic)) -> accidents_vic
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(viridis))
suppressPackageStartupMessages(library(ggthemes))
unemploy <- read_csv("Data//unemployment.csv")
accidents1 <- read_csv("Data//accidents_2017.csv")
accidents <- read_csv("Data//accidents_al.csv")
population <- read_csv("Data//population_al.csv")
immigration_nationality = read.csv("Data//nationality.csv")
immigration_age = read.csv("Data//age.csv")
immigration_sex = read.csv("Data//sex.csv")
accidents%>%
group_by(DISTRICT.NAME)%>%
summarise(total_vic = sum(VICTIMS, na.rm = T))%>%
mutate(vic_rate = round(100 * total_vic/ sum(total_vic),2))%>%
arrange(desc(total_vic)) -> accidents_vic
population%>%
group_by(DISTRICT.NAME)%>%
summarise(total_pop = round(sum(NUMBER_P, na.rm = T))) -> dis_pop
left_join(accidents_vic, dis_pop, by = "DISTRICT.NAME")%>%
arrange(desc(vic_rate)) -> dis_vic_pop
dis_vic_pop%>%
ggplot(aes(x = DISTRICT.NAME, y = vic_rate, fill = total_pop)) +
geom_col() +
theme_bw() +
coord_flip() +
ggtitle("Accident Rate vs Districts") +
xlab("Districts") +
ylab("Accident Rate by %") +
labs(fill = "Total Population")
accidents%>%
group_by(DISTRICT.NAME)%>%
summarise(total_vic = sum(VICTIMS, na.rm = T))%>%
mutate(vic_rate = round(100 * total_vic/ sum(total_vic),2))%>%
arrange(desc(total_vic)) -> accidents_vic
population%>%
group_by(DISTRICT.NAME)%>%
summarise(total_pop = sum(NUMBER_P, na.rm = T)) -> dis_pop
left_join(accidents_vic, dis_pop, by = "DISTRICT.NAME")%>%
arrange(desc(vic_rate)) -> dis_vic_pop
dis_vic_pop
dis_vic_pop%>%
mutate(DISTRICT.NAME = fct_reorder(DISTRICT.NAME, vic_rate))%>%
ggplot(aes(x = DISTRICT.NAME, y = vic_rate, size = total_pop)) +
geom_point(color = "blue") +
theme_bw() +
coord_flip() +
ggtitle("Accident Rate vs Districts") +
xlab("Districts") +
ylab("Accident Rate by %") +
labs(fill = "Total Population")
accidents%>%
group_by(DISTRICT.NAME)%>%
summarise(sum_veh = sum(VEHICLES.INVOLVED),
sum_mid = sum(MILD.INJURIES),
sum_ser = sum(SERIOUS.INJURIES))%>%
mutate(mid_rate = round(100 * sum_mid/ sum(sum_mid), 2),
ser_rate = round(100 * sum_ser/ sum(sum_ser), 2),
veh_rate = round(100 * sum_veh/ sum(sum_veh), 2))%>%
select(DISTRICT.NAME, mid_rate, ser_rate,veh_rate)%>%
arrange(desc(veh_rate))
accidents%>%
group_by(DISTRICT.NAME)%>%
summarise(sum_veh = sum(VEHICLES.INVOLVED),
sum_mid = sum(MILD.INJURIES),
sum_ser = sum(SERIOUS.INJURIES))%>%
mutate(mid_rate = round(100 * sum_mid/ sum(sum_mid), 2),
ser_rate = round(100 * sum_ser/ sum(sum_ser), 2),
veh_rate = round(100 * sum_veh/ sum(sum_veh), 2))%>%
ggplot(aes(x = DISTRICT.NAME, y = veh_rate, color = mid_rate, size = ser_rate)) +
geom_point() +
scale_colour_gradient(low = "Purple", high = "orange") +
coord_flip() +
theme_bw() +
ggtitle("Vehicle Involved vs Injury Level by District") +
xlab("Districts") +
ylab("Vehicle Involved by %") +
labs(color = "Mild Injury by %", size = "Serious Injury by %")
monthvec <- c("December", "November", "October", "September", "August", "July", "June", "May", "April", "March", "February", "January")
accidents%>%
mutate(month_fc = parse_factor(MONTH, levels = monthvec))%>%
group_by(month_fc, PART.OF.THE.DAY)%>%
summarise(total_vic = sum(VICTIMS))%>%
ggplot(aes(x = month_fc, y = total_vic, fill = PART.OF.THE.DAY)) +
geom_col() +
coord_flip() +
ggtitle("Accident count vs Month") +
xlab("Accidents") +
ylab("Month") +
labs(fill = "Part of the Day")
immigration_nationality %>%
filter(Year == 2017) %>%
select(Year, District.Name, Nationality, Number) %>%
group_by(Nationality) %>%
summarize(TotalNumber = sum(Number)) %>%
arrange(desc(TotalNumber)) %>%
filter(Nationality != "Spain") %>%
filter(TotalNumber > 1000) ->tidy_immigration_nationality
immigration_nationality %>%
filter(Year == 2017) %>%
select(Year, District.Name, Nationality, Number) %>%
group_by(Nationality) %>%
summarize(TotalNumber = sum(Number)) %>%
arrange(desc(TotalNumber)) %>%
filter(Nationality != "Spain") %>%
filter(TotalNumber > 1000) ->tidy_immigration_nationality
immigration_nationality %>%
filter(Year == 2017) %>%
select(Year, District.Name, Nationality, Number) %>%
group_by(Nationality) %>%
summarize(TotalNumber = sum(Number)) %>%
arrange(desc(TotalNumber)) %>%
filter(Nationality != "Spain") %>%
filter(TotalNumber > 1000) ->tidy_immigration_nationality
immigration_nationality %>%
filter(Year == 2017) %>%
select(Year, District.Name, Nationality, Number) %>%
group_by(Nationality) %>%
summarize(TotalNumber = sum(Number)) %>%
arrange(desc(TotalNumber)) %>%
filter(Nationality != "Spain") %>%
filter(TotalNumber > 1000) ->tidy_immigration_nationality
immigration_nationality %>%
filter(Year == 2017) %>%
select(Year, District.Name, Nationality, Number) %>%
group_by(Nationality)
immigration_nationality %>%
filter(Year == 2017) %>%
select(Year, District.Name, Nationality, Number) %>%
group_by(Nationality) %>%
summarize(TotalNumber = sum(Number))
immigration_nationality %>%
filter(Year == 2017) %>%
select(Year, District.Name, Nationality, Number) %>%
group_by(Nationality) %>%
summarise(TotalNumber = sum(Number))
immigration_nationality %>%
filter(Year == 2017) %>%
select(Year, District.Name, Nationality, Number) %>%
group_by(Nationality) %>%
summarise(TotalNumber = sum(Number)) %>%
arrange(desc(TotalNumber)) %>%
filter(Nationality != "Spain") %>%
filter(TotalNumber > 1000) ->tidy_immigration_nationality
ggplot(tidy_immigration_nationality, aes(x =Nationality, y = TotalNumber, fill = Nationality)) +
geom_bar(stat = "identity") +
xlab("District Numbers") +
ylab("Immigrant Number") +
coord_flip()
ggplot(immigration_age, aes(x = Age, y = Immigrants, color = Age, fill = Age)) +
geom_boxplot() +
facet_wrap(~ District.Name) +
xlab("District Names") +
ylab("Immigrant Number") +
coord_flip()
immigration_sex %>%
mutate(District.Name = iconv(District.Name, "latin1", "UTF-8")) ->
immigration_sex_2
ggplot(immigration_sex_2, aes(x = Gender, y = Immigrants, color = Gender, fill = Gender)) +
geom_boxplot() +
facet_wrap(~ District.Name) +
xlab("District Names") +
ylab("Immigrant Number") +
coord_flip()
gen <- c("Male" = "red",
"Female" = "blue")
unemploy %>%
select(`District Name`,Gender, Year, Number, Demand_occupation) %>%
filter(Year == 2017 & `District Name` != "No consta") %>%
arrange(`Gender`) %>%
group_by(`Gender`) %>%
summarize( Unemployed = sum(Number)) %>%
ggplot(mapping = aes(x = `Gender`, y = Unemployed, fill = Gender)) +
geom_col() +
ggtitle("Unemployment w.r.t. Gender") +
xlab("Gender") +
ylab("Number Of Unemployed people") +
theme_bw() +
scale_fill_manual(
values = gen,
limits = names(gen)) +
theme(axis.text.x = element_text(size = 10, angle = 45, hjust = 1))
unemploy %>%
select(`District Name`,Gender, Year, Number, Demand_occupation) %>%
filter(Year == 2017 & `District Name` != "No consta") %>%
arrange(`Gender`) %>%
group_by(`Gender`) %>%
summarise( Unemployed = sum(Number)) %>%
ggplot(mapping = aes(x = `Gender`, y = Unemployed, fill = Gender)) +
geom_col() +
ggtitle("Unemployment w.r.t. Gender") +
xlab("Gender") +
ylab("Number Of Unemployed people") +
theme_bw() +
scale_fill_manual(
values = gen,
limits = names(gen)) +
theme(axis.text.x = element_text(size = 10, angle = 45, hjust = 1))
unemploy %>%
select(`District Name`,Gender, Year, Number, Demand_occupation) %>%
filter(Year == 2017 & `District Name` != "No consta") %>%
arrange(`Gender`, `District Name`) %>%
group_by(`Gender`, `District Name`) %>%
summarize( Unemployed = sum(Number)) %>%
ggplot(mapping = aes(x = `District Name`, y = Unemployed, fill = Gender)) +
geom_col() +
ggtitle("Unemployment w.r.t. Districts filled by Gender") +
xlab("District Name") +
ylab("Number Of Unemployed people") +
theme_bw() +
# scale_fill_discrete(name = "Gender") +
scale_fill_manual(
values = gen,
limits = names(gen)) +
theme(axis.text.x = element_text(size = 10, angle = 45, hjust = 1))
unemploy %>%
select(`District Name`,Gender, Year, Number, Demand_occupation) %>%
filter(Year == 2017 & `District Name` != "No consta") %>%
arrange(`Gender`, `District Name`) %>%
group_by(`Gender`, `District Name`) %>%
summarise( Unemployed = sum(Number)) %>%
ggplot(mapping = aes(x = `District Name`, y = Unemployed, fill = Gender)) +
geom_col() +
ggtitle("Unemployment w.r.t. Districts filled by Gender") +
xlab("District Name") +
ylab("Number Of Unemployed people") +
theme_bw() +
# scale_fill_discrete(name = "Gender") +
scale_fill_manual(
values = gen,
limits = names(gen)) +
theme(axis.text.x = element_text(size = 10, angle = 45, hjust = 1))
select(`District Name`, Year, Number, Demand_occupation) %>%
filter(Year == 2017) %>%
arrange(`District Name`) %>%
group_by(`District Name`) %>%
summarize( Number_Unemployed = sum(Number)) ->
Unemployed
select(`District Name`, Year, Number, Demand_occupation) %>%
filter(Year == 2017) %>%
arrange(`District Name`) %>%
group_by(`District Name`) %>%
summarise( Number_Unemployed = sum(Number)) ->
Unemployed
unemploy %>%
select(`District Name`, Year, Number, Demand_occupation) %>%
filter(Year == 2017) %>%
arrange(`District Name`) %>%
group_by(`District Name`) %>%
summarise( Number_Unemployed = sum(Number)) ->
Unemployed
##Getting number of accidents by District Name
accidents%>%
group_by(`District Name`)%>%
count(sort = TRUE) %>%
rename(Number_of_Accidents = n) ->
NewA
##Getting number of accidents by District Name
accidents1%>%
group_by(`District Name`)%>%
count(sort = TRUE) %>%
rename(Number_of_Accidents = n) ->
NewA
unemploy %>%
select(`District Name`, Year, Number, Demand_occupation) %>%
filter(Year == 2017) %>%
arrange(`District Name`) %>%
group_by(`District Name`) %>%
summarise( Number_Unemployed = sum(Number)) ->
Unemployed
##Getting number of accidents by District Name
accidents1%>%
group_by(`District Name`)%>%
count(sort = TRUE) %>%
rename(Number_of_Accidents = n) ->
NewA
##Removing unknown rows from Accidents and Unemployment
NewAccidents <- NewA[!NewA$`District Name` == "Unknown",]
Unemployed <- Unemployed[!Unemployed$`District Name` == "No consta",]
##Merging the two dataframes
Total <- merge(Unemployed, NewAccidents, by = "District Name")
##Final ScatterPlot
Total %>%
ggplot(mapping = aes(x = Number_Unemployed, y = Number_of_Accidents, color = `District Name`)) +
geom_point(size = 5) +
xlab("Number of Unemployed") +
ylab("Number of Accidents") +
ggtitle("Number of Accidents for district names filled by unemployment") +
theme_bw() +
scale_color_manual(values = c("red", "blue", "green", "sky blue", "black", "grey", "brown", "gold", "dark green", "pink" ))
setwd("C:/Study/Stat612R/R Project/FInal Report")
